#!/usr/bin/env python3
"""
Generate human readable packages.txt file from a conda-lock file.
"""
import argparse

def parse_package_url(line):
    """
    Parse a single conda-lock line and return name

    Supports both conda and pip pins.

    Returns name of package and version as tuple
    """

    if 'pythonhosted.org' in line: # pip
        # Get just the URL
        full_url = line.split()[-1]
        # Remove hash from URL
        url = full_url.split('#', 1)[0]
        # Get just the name of file we're getting
        filename = url.split('/')[-1]
        if filename.endswith('.whl'):
            # Wheels are in the format <package-name>-<version>-<tags>
            underscored_pkg_name, version, _ = filename.split('-', 2)
        elif filename.endswith('.tar.gz'):
            # tarballs are just <package>-<version_.tgz
            basename = filename.rsplit('.', 2)[0]
            underscored_pkg_name, version = basename.split('-', 1)
        else:
            raise RuntimeError(f'Found unknown file {filename} in conda-lock file')

        # PyPI has files with '_' when the package name has '-' in it
        pkg_name = underscored_pkg_name.replace('_', '-')
    else:
        # Given something like this:
        # https://conda.anaconda.org/conda-forge/noarch/nomkl-1.0-h5ca1d4c_0.tar.bz2#9a66894dfd07c4510beb6b3f9672ccc0
        # it should return nomkl, 1.0, h5ca14dc_0
        # Remove hash from the URL
        url = line.split('#', 1)[0]
        # Find last component of URL
        full_pkg = url.rsplit('/', 1)[-1]
        # Full pakage names are of form <pkg-name>-<version>-<build>.
        # Since <pkg-name> can have dashes, use rsplit to split the whole
        # thing into 3 components, starting from the right.
        pkg_name, version, _ = full_pkg.rsplit('-', 2)
    return pkg_name, version

def main():
    argparser = argparse.ArgumentParser()
    argparser.add_argument('lock_file', help='Path to conda-lock file to parse', default='conda-linux-64.lock')
    args = argparser.parse_args()

    print('# List of packages and versions installed in the environment')
    print(f'# Generated by parsing {args.lock_file}, please use that as source of truth')
    with open(args.lock_file) as fp:
        # Remove comments
        lines = [line for line in fp.readlines() if line.strip() and not line.startswith('#')]
    packages = []
    for line in lines:
        if 'url: https:' not in line:
            continue
        packages.append(parse_package_url(line))
    # print sort listed of pacakges
    for pkg_name, version in sorted(packages):
       print(f'{pkg_name}=={version}')

if __name__ == '__main__':
    main()